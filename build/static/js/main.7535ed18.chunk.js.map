{"version":3,"sources":["assets/cryptocurrency.png","hooks/useCurrency.js","hooks/useCrypto.js","components/Error.js","components/Form.js","components/Price.js","App.js","index.js"],"names":["Label","styled","label","Selector","select","useCurrency","initialState","exchange","useState","state","setState","onChange","e","target","value","map","x","code","name","useCrypto","options","CoinInfo","Name","FullName","Id","P","p","Error","message","Button","input","Form","setData","data","list","setList","error","setError","currency","Select","crypto","SelectCrypto","useEffect","a","axios","get","result","coins","Data","fetchApi","onSubmit","preventDefault","coin","cryptoCurrency","type","RespDiv","div","CurrentPrice","Price","resp","Object","keys","length","PRICE","LOWDAY","HIGHDAY","CHANGEPCT24HOUR","LASTUPDATE","Container","Image","img","Heading","h1","App","setResp","url","DISPLAY","fetchApiPrice","src","image","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAAe,MAA0B,2C,OCGnCA,EAAQC,IAAOC,MAAV,8MASLC,EAAWF,IAAOG,OAAV,uLAiCCC,EAvBK,SAACH,EAAOI,EAAcC,GAAc,IAAD,EAEzBC,mBAASF,GAFgB,mBAE5CG,EAF4C,KAErCC,EAFqC,KAoBnD,MAAO,CAACD,EAhBO,kBACX,qCACI,cAACT,EAAD,UAAQE,IACR,eAACC,EAAD,CACIQ,SAAU,SAAAC,GAAC,OAAIF,EAASE,EAAEC,OAAOC,QACjCA,MAAOL,EAFX,UAII,wBAAQK,MAAM,GAAd,wBACCP,EAASQ,KAAI,SAAAC,GAAC,OACX,wBAAqBF,MAAOE,EAAEC,KAA9B,SAAqCD,EAAEE,MAA1BF,EAAEC,gBAORP,ICvCrBV,EAAQC,IAAOC,MAAV,8MASLC,EAAWF,IAAOG,OAAV,uLAuCCe,EA7BG,SAACjB,EAAOI,EAAcc,GAAa,IAAD,EAEtBZ,mBAASF,GAFa,mBAEzCG,EAFyC,KAElCC,EAFkC,KA0BhD,MAAO,CAACD,EAtBa,kBAEjB,qCACI,cAAC,EAAD,UAAQP,IACR,eAAC,EAAD,CACIS,SAAU,SAAAC,GAAC,OAAIF,EAASE,EAAEC,OAAOC,QACjCA,MAAOL,EAFX,UAKI,wBAAQK,MAAM,GAAd,sBACCM,EAAQL,KAAI,SAAAC,GAAC,OAEV,wBAA4BF,MAAOE,EAAEK,SAASC,KAA9C,SAAqDN,EAAEK,SAASE,UAAnDP,EAAEK,SAASG,OARhC,WAkBqBd,IC3C3Be,EAAIxB,IAAOyB,EAAV,2NAqBQC,EAVD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACZ,OACI,cAACH,EAAD,UAAIG,K,iBCVNC,EAAS5B,IAAO6B,MAAV,kWA6FGC,EA3EF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,QAAmB,KAAVC,KAGIzB,mBAAS,KAHH,mBAGvB0B,EAHuB,KAGjBC,EAHiB,OAIJ3B,oBAAS,GAJL,mBAIvB4B,EAJuB,KAIhBC,EAJgB,OAkBHhC,EAAY,uBAAwB,GAZ9C,CACb,CAACY,KAAM,MAAOC,KAAK,OACnB,CAACD,KAAM,MAAOC,KAAK,OACnB,CAACD,KAAM,MAAOC,KAAK,OACnB,CAACD,KAAM,MAAOC,KAAK,OACnB,CAACD,KAAM,MAAOC,KAAK,OACnB,CAACD,KAAM,MAAOC,KAAK,OACnB,CAACD,KAAM,MAAOC,KAAK,OACnB,CAACD,KAAM,MAAOC,KAAK,SAdO,mBAkBvBoB,EAlBuB,KAkBbC,EAlBa,OAqBApB,EAAU,qBAAqB,GAAIe,GArBnC,mBAqBxBM,EArBwB,KAqBhBC,EArBgB,KAwB9BC,qBAAU,YACQ,uCAAG,8BAAAC,EAAA,sEACQC,IAAMC,IAAI,2EADlB,OACPC,EADO,OAEPC,EAAQD,EAAOb,KAAKe,KAC1Bb,EAAQY,GAHK,2CAAH,qDAKdE,KACF,IAmBF,OACI,uBACIC,SAnBa,SAAAtC,GACjBA,EAAEuC,iBAGc,KAAbb,GAA8B,KAAXE,GAItBH,GAAS,GACTL,EAAQ,CACJoB,KAAKd,EACLe,eAAeb,KANfH,GAAS,IAab,UAIKD,EAAQ,cAAC,EAAD,CAAOR,QAAQ,4BAA8B,KAEtD,cAACW,EAAD,IAEA,cAACE,EAAD,IAGA,cAACZ,EAAD,CACIyB,KAAK,SACLxC,MAAM,iBCvFhByC,EAAUtD,IAAOuD,IAAV,qFAKP/B,EAAIxB,IAAOyB,EAAV,iDAID+B,EAAexD,IAAOyB,EAAV,iDAiBHgC,EAbD,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACZ,OAA8B,IAA3BC,OAAOC,KAAKF,GAAMG,OAAmB,KAGpC,eAACP,EAAD,WACI,eAACE,EAAD,6BAA6B,+BAAOE,EAAKI,WACzC,eAAC,EAAD,yBAAc,yCAAYJ,EAAKK,UAA/B,MAAgD,yCAAYL,EAAKM,cACjE,eAAC,EAAD,6BAAkB,iCAAON,EAAKO,gBAAZ,WAClB,eAAC,EAAD,uBAAY,+BAAOP,EAAKQ,oBCd9BC,EAAYnE,IAAOuD,IAAV,yLASTa,EAAQpE,IAAOqE,IAAV,qEAKLC,EAAUtE,IAAOuE,GAAV,4TA+EEC,EA5DH,WAAO,IAAD,EAGQjE,mBAAS,CAC7B4C,KAAK,GACLC,eAAe,KALH,mBAGTpB,EAHS,KAGHD,EAHG,KAQToB,EAAwBnB,EAAxBmB,KAAMC,EAAkBpB,EAAlBoB,eARG,EAUQ7C,mBAAS,IAVjB,mBAUTmD,EAVS,KAUHe,EAVG,KAiChB,OApBAhC,qBAAU,YAGW,uCAAG,gCAAAC,EAAA,yDAEV,KAATS,EAFmB,wDAIduB,EAJc,sEAIsDtB,EAJtD,kBAI8ED,GAJ9E,SAKCR,IAAMC,IAAI8B,GALX,OAKd7B,EALc,OAMd9B,EAAI8B,EAAOb,KAAK2C,QAAQvB,GAAgBD,GAE9CsB,EAAQ1D,GARY,2CAAH,qDAWnB6D,KAEA,CAACzB,EAAMC,IAKP,eAACe,EAAD,WACE,8BACE,cAACC,EAAD,CACES,IAAKC,EACLC,IAAI,iBAGR,gCACE,cAACT,EAAD,wCAIE,cAAC,EAAD,CACEvC,QAASA,EACTC,KAAMA,IAGR,cAAC,EAAD,CACE0B,KAAMA,WC1FlBsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7535ed18.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cryptocurrency.51f1d2ed.png\";","import React, { useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label `\r\n    font-family:'Bebas Neue',cursive;\r\n    color:#fff;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size:2.8rem;\r\n    margin-top:2rem;\r\n    display: block;\r\n`\r\nconst Selector = styled.select `\r\n    width:100%;\r\n    display:block;\r\n    padding:1rem;\r\n    --webkit-appearance:none;\r\n    border-radius: 10px;\r\n    border:none;\r\n    font-size: 1.4rem;\r\n`\r\n\r\nconst useCurrency = (label, initialState, exchange) => {\r\n\r\n    const [state, setState] = useState(initialState)\r\n\r\n    const Select = ()=>(\r\n        <>\r\n            <Label>{label}</Label>\r\n            <Selector\r\n                onChange={e => setState(e.target.value)}\r\n                value={state}\r\n            >\r\n                <option value=\"\">--Select--</option>\r\n                {exchange.map(x => (\r\n                    <option key={x.code} value={x.code}>{x.name}</option>\r\n                ))}\r\n            </Selector>\r\n        </>\r\n    );\r\n\r\n\r\n    return [state, Select, setState];\r\n}\r\n\r\nexport default useCurrency;","import React, { useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label `\r\n    font-family:'Bebas Neue',cursive;\r\n    color:#fff;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size:2.8rem;\r\n    margin-top:2rem;\r\n    display: block;\r\n`\r\nconst Selector = styled.select `\r\n    width:100%;\r\n    display:block;\r\n    padding:1rem;\r\n    --webkit-appearance:none;\r\n    border-radius: 10px;\r\n    border:none;\r\n    font-size: 1.4rem;\r\n`\r\n\r\nconst useCrypto = (label, initialState, options) => {\r\n\r\n    const [state, setState] = useState(initialState);\r\n\r\n    const SelectCrypto = ()=>(\r\n        \r\n        <>\r\n            <Label>{label}</Label>\r\n            <Selector\r\n                onChange={e => setState(e.target.value)}\r\n                value={state}\r\n            >\r\n\r\n                <option value=\"\">-Select-</option>\r\n                {options.map(x => (\r\n                \r\n                    <option key={x.CoinInfo.Id} value={x.CoinInfo.Name}>{x.CoinInfo.FullName}</option>\r\n                    \r\n                ))};\r\n\r\n\r\n            </Selector>\r\n        </>\r\n    );\r\n\r\n\r\n    return [state, SelectCrypto, setState];\r\n}\r\n\r\nexport default useCrypto;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst P = styled.p `\r\n    background-color: #b7322c;\r\n    padding:1rem;\r\n    color:#fff;\r\n    font-size: 25px;\r\n    text-transform: uppercase;\r\n    font-weight:bold;\r\n    font-family:'Bebas Neue', cursive;\r\n    \r\n`\r\n\r\nconst Error = ({message}) => {\r\n    return ( \r\n        <P>{message}</P>\r\n     );\r\n}\r\n\r\nError.propTypes={\r\n    message:PropTypes.string.isRequired\r\n}\r\n \r\nexport default Error;","import React, { useState, useEffect } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport useCurrency from '../hooks/useCurrency';\r\nimport useCrypto from '../hooks/useCrypto';\r\nimport Error from './Error';\r\nimport axios from 'axios';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = styled.input `\r\n    margin-top:20px;\r\n    font-weight:bold;\r\n    font-size:20px;\r\n    padding:10px;\r\n    background-color: #66a2fe;\r\n    border:none;\r\n    width:100%;\r\n    border-radius: 10px;\r\n    color:#fff;\r\n    transition:background-color .3s ease;\r\n    \r\n    &:hover{\r\n        background-color: #326ac0;\r\n        cursor:pointer;\r\n    }\r\n`\r\n\r\nconst Form = ({setData, data}) => {\r\n\r\n    //useState crypto list\r\n    const [list, setList] = useState([]);\r\n    const [error, setError] = useState(false);\r\n\r\n    const exchange = [\r\n        {code: 'USD', name:'USD'},\r\n        {code: 'EUR', name:'EUR'},\r\n        {code: 'GBP', name:'GBP'},\r\n        {code: 'ARS', name:'ARS'},\r\n        {code: 'MXN', name:'MXN'},\r\n        {code: 'BRL', name:'R$S'},\r\n        {code: 'JPY', name:'JPY'},\r\n        {code: 'AUD', name:'AUD'}\r\n    ]\r\n\r\n    //custom hook useCurrency\r\n    const [currency, Select] = useCurrency(\"Choose your Currency\", '', exchange);\r\n\r\n    //custom hook useCrypto\r\n    const[crypto, SelectCrypto] = useCrypto(\"Choose your Crypto\",'', list);\r\n\r\n    //useEffect to fetch API\r\n    useEffect(()=>{\r\n        const fetchApi = async () => {\r\n            const result = await axios.get('https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD');\r\n            const coins = result.data.Data;\r\n            setList(coins);\r\n        }\r\n        fetchApi();\r\n    },[]);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n\r\n        if(currency === '' || crypto === ''){\r\n            setError(true);\r\n            return;\r\n        }\r\n        setError(false);\r\n        setData({\r\n            coin:currency,\r\n            cryptoCurrency:crypto\r\n        })\r\n\r\n    }\r\n\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={handleSubmit}\r\n        >\r\n\r\n            {error ? <Error message='All fields are required' /> :null}\r\n\r\n            <Select />\r\n\r\n            <SelectCrypto />\r\n\r\n\r\n            <Button \r\n                type='submit'\r\n                value='Calulate'\r\n            />\r\n        </form>\r\n     );\r\n}\r\n\r\nForm.propTypes={\r\n    data:PropTypes.object.isRequired,\r\n    setData:PropTypes.func.isRequired\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst RespDiv = styled.div`\r\n    color:#fff;\r\n    font-family:'Bebas Neue', cursive;\r\n`;\r\n\r\nconst P = styled.p `\r\n    font-size:18px;\r\n`;\r\n\r\nconst CurrentPrice = styled.p `\r\n    font-size:30px;\r\n`;\r\n\r\nconst Price = ({resp}) => {\r\n    if(Object.keys(resp).length===0) return null;\r\n\r\n    return ( \r\n        <RespDiv>\r\n            <CurrentPrice>Current Price: <span>{resp.PRICE}</span></CurrentPrice>\r\n            <P>Top Today: <span>Min: {resp.LOWDAY}</span> - <span>Max: {resp.HIGHDAY}</span></P>\r\n            <P>Last 24 Hours: <span>{resp.CHANGEPCT24HOUR}% </span></P>\r\n            <P>Updated: <span>{resp.LASTUPDATE}</span></P>\r\n        </RespDiv>\r\n     );\r\n\r\n}\r\nexport default Price;","import React, {useState, useEffect} from 'react';\r\nimport styled from '@emotion/styled';\r\nimport image from './assets/cryptocurrency.png';\r\nimport Form from './components/Form';\r\nimport Price from './components/Price';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n\r\nconst Container = styled.div `\r\n  max-width:900px;\r\n  margin: 0 auto;\r\n  @media(min-width:992px){\r\n    display:grid;\r\n    grid-template-columns: repeat(2, 1fr);\r\n    column-gap:2rem;\r\n  }\r\n`\r\nconst Image = styled.img `\r\n  max-width:100%;\r\n  margin-top:5rem;\r\n\r\n`\r\nconst Heading = styled.h1 `\r\n  font-family:'Bebas Neue', cursive;\r\n  color:#fff;\r\n  text-align: left;\r\n  font-weight: 700;\r\n  font-size:50px;\r\n  margin-bottom: 50px;\r\n  margin-top:80px;\r\n\r\n  &::after{\r\n    content:'';\r\n    width:100px;\r\n    height: 6px;\r\n    background-color: #66a2fe;\r\n    display: block;\r\n  }\r\n    `\r\n\r\n\r\nconst App = () => {\r\n\r\n\r\n  const [data, setData] = useState({\r\n      coin:'',\r\n      cryptoCurrency:'',\r\n    })\r\n  \r\n  const {coin, cryptoCurrency} = data;\r\n  \r\n  const [resp, setResp] = useState({});\r\n\r\n\r\n  useEffect(()=>{\r\n\r\n    //fetch Api to get prices\r\n    const fetchApiPrice = async ()=>{\r\n\r\n    if(coin === '') return;\r\n\r\n      const url =`https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${cryptoCurrency}&tsyms=${coin}`\r\n      const result = await axios.get(url);\r\n      const x = result.data.DISPLAY[cryptoCurrency][coin];\r\n\r\n      setResp(x);\r\n      \r\n    }\r\n    fetchApiPrice();\r\n\r\n  },[coin, cryptoCurrency])\r\n\r\n  \r\n\r\n  return ( \r\n    <Container>\r\n      <div>\r\n        <Image \r\n          src={image}\r\n          alt='crypto png'\r\n        />\r\n      </div>\r\n      <div>\r\n        <Heading>\r\n          Crypto Currency Converter\r\n        </Heading>\r\n\r\n          <Form \r\n            setData={setData}\r\n            data={data}\r\n          />\r\n\r\n          <Price \r\n            resp={resp}\r\n          />\r\n\r\n      </div>\r\n    </Container>\r\n   );\r\n}\r\n \r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}